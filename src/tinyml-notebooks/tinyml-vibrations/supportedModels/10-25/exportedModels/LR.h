#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LogisticRegression {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[2] = { -0.267446886288  };
                        votes[0] += dot(x,   -2.24219234916  , -3.876571133656  , -0.10000827737  , -2.269720180445  , -3.894496526571  , -0.090667867305  , -2.263749599693  , -3.835490834329  , -0.09011953466  , -2.266883821192  , -3.88574648072  , -0.087203388929  , -2.284499916042  , -3.847859658768  , -0.097604124817  , -2.257131422224  , -3.878165606403  , -0.097354781013  , -2.289383316021  , -3.863169914806  , -0.099965125988  , -2.259403009823  , -3.877132087513  , -0.097343290114  , -2.289732830307  , -3.863521878209  , -0.101387097088  , -2.267872755872  , -3.873094369447  , -0.106908739326  , -2.28775639164  , -3.867016182035  , -0.102716858677  , -2.254594899983  , -3.853304517117  , -0.082218341541  , -2.279393460157  , -3.848212144914  , -0.08065131389  , -2.254837065254  , -3.830777642894  , -0.077849556491  , -2.287125075909  , -3.835753600896  , -0.066096377126  , -2.26460843823  , -3.80770812772  , -0.075688741679  , -2.280599225215  , -3.858562243899  , -0.087330885787  , -2.271199129401  , -3.823650131713  , -0.083535232153  , -2.267197080504  , -3.856566824012  , -0.095731738343  , -2.281008009708  , -3.867273983043  , -0.126034312334 );
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 2; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 60);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 60; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }