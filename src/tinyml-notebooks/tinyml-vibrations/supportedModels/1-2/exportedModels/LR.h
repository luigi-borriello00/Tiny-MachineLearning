#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LogisticRegression {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[2] = { 13.09625267999  };
                        votes[0] += dot(x,   0.331199839015  , -0.148761060816  , -0.692773470148  , 0.31927996213  , -0.19852707478  , -0.617617153498  , 0.271096952991  , -0.196948982795  , -0.676790641161  , 0.31291664125  , -0.093982842778  , -0.618575209937  , 0.351122041481  , -0.228526474881  , -0.714394216662  , 0.288121366991  , 0.001608932145  , -0.700955299278  , 0.414018986825  , -0.294453423533  , -0.654244162749  , 0.287132107146  , -0.109491524574  , -0.656455203359  , 0.307265742954  , -0.226586735626  , -0.635248606264  , 0.319730507833  , -0.175720626773  , -0.653911925968  , 0.305684723056  , -0.085478006247  , -0.685498685247  , 0.318281509973  , -0.216226678548  , -0.629571249257  , 0.278258794858  , -0.024019400025  , -0.675336197468  , 0.298179682096  , -0.276086974618  , -0.653180111703  , 0.289149492455  , 0.016353194165  , -0.633722900153  , 0.362247069943  , -0.280108830461  , -0.665701258012  , 0.307559273829  , -0.09429795531  , -0.598898576106  , 0.373146659539  , -0.067703860878  , -0.683042623959  , 0.320132516876  , -0.141208472575  , -0.64117935016  , 0.347101665319  , -0.112226296942  , -0.666448162471 );
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 2; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 60);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 60; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }