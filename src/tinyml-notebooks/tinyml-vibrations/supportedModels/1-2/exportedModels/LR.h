#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LogisticRegression {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[2] = { 0.654773056683  };
                        votes[0] += dot(x,   0.307757524501  , -0.159587298104  , -0.060865074627  , 0.292435638057  , -0.205669096358  , 0.015450842136  , 0.247428187497  , -0.205938143909  , -0.045109869379  , 0.287257887041  , -0.102327602879  , 0.014310662202  , 0.326833086067  , -0.23653300445  , -0.0819521564  , 0.263328165809  , -0.006867068894  , -0.068478414292  , 0.389619496463  , -0.303277697906  , -0.021198251903  , 0.261414843982  , -0.118081696658  , -0.023369856982  , 0.283200580316  , -0.23532316859  , -0.002104282707  , 0.294434600306  , -0.184896330825  , -0.021275709763  , 0.281616670922  , -0.093233202349  , -0.052657146792  , 0.293379593846  , -0.225731602838  , 0.003737698589  , 0.253692744322  , -0.031079598752  , -0.042334743592  , 0.27338822404  , -0.285879375891  , -0.020483926374  , 0.263853020126  , 0.009132202696  , -0.000544180722  , 0.338071758456  , -0.290177157887  , -0.033172200836  , 0.282367640887  , -0.100158323339  , 0.034549224869  , 0.350244727414  , -0.078879474291  , -0.051255715677  , 0.294014624003  , -0.14579876762  , -0.007756088256  , 0.32508281822  , -0.124792558463  , -0.034240589408 );
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 2; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 60);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 60; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }