#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LogisticRegression {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[5] = { -1.306664331104 ,-1.791932415225 ,-1.650753892293 ,-1.343264105166 ,-1.528438233982  };
                        votes[0] += dot(x,   -0.885217849009  , 0.26280093659  , 0.192633978681  , -0.222781815541  , -0.59195700021  , -0.175902407217  , 0.193318148072  , 0.457302232274  , 0.483136072571  , -0.012744856766  , 0.135697546433  , -0.39071423291  , 0.049839038931  , 0.056751815665  , -0.124060939878  , 0.802610665731  , -0.557120648845  , -0.39319641568  , -0.609995292035  , 0.657286731238  , -0.61054316583  , 0.019264633833  , 0.188544889776  , -0.373590871992  , 0.836529613245  , -0.589597136007  , -0.00531376309  , -0.699706842733  , 0.970161630075  , -0.012457554316  , -0.702617488482  , 0.450595895531 );
                        votes[1] += dot(x,   -0.299897285221  , -0.331201067542  , -0.297796033523  , 0.74839942126  , -0.042044265394  , -0.410691778  , -0.260806386489  , 0.119265665334  , -0.527074184597  , -0.2727478347  , -0.03044706333  , 0.292565061054  , -0.07795556378  , -0.023103115697  , 0.258421726531  , -0.173731681644  , 0.49682618754  , 0.028337877903  , -0.137522545488  , 0.464790026234  , -0.090635884256  , -0.01740362097  , -0.098000823601  , -0.074743059647  , 0.01243184402  , -0.094739139444  , -0.286798215998  , 0.691968539313  , -0.339583999505  , -0.132313308398  , 0.033831031934  , 0.2314911541 );
                        votes[2] += dot(x,   0.668508082979  , 0.380166185069  , -0.278570346015  , -0.385170527019  , -0.047661905424  , 0.165504581256  , 0.162337868086  , 0.094708813454  , 0.513903772999  , -0.009828003983  , -0.54694517934  , 0.139510605109  , -0.021608612064  , 0.231122703879  , -0.513822683525  , 0.092147404066  , -0.215444766712  , 0.567385272198  , -0.294939270415  , -0.863386117665  , 0.909536819036  , 0.130265190262  , -0.209550646718  , 0.18823118144  , -0.474644766236  , 0.045871989649  , 0.412680757101  , -0.425687305746  , 0.236296668447  , 0.088371578607  , -0.34179063874  , -0.009217894904 );
                        votes[3] += dot(x,   -0.085024909003  , 0.135480576315  , 0.286941485488  , 0.199076474622  , 0.090752162369  , 0.380671089051  , 0.224330961236  , -0.829719513565  , -0.660394636638  , -0.508389391574  , 0.043382934538  , 0.25148338553  , 0.495210119894  , -0.15037747241  , 0.222398085855  , -0.762438917699  , -0.029262624977  , -0.13345605309  , -0.131464899659  , -0.72459212382  , 0.362714068535  , -0.424840059867  , 1.04160847976  , 0.26776869438  , -0.642216203493  , 0.267454471763  , -0.090633388741  , -0.064630769682  , 0.060974333564  , -0.07051369533  , 0.504114388805  , -0.18424349754 );
                        votes[4] += dot(x,   0.416236196178  , -0.746053590029  , -0.044943370626  , -0.08730780964  , 0.537599128873  , 0.010595266  , -0.37071000846  , 0.108327177112  , -0.079784607318  , 0.557777992229  , 0.22918592516  , -0.103202936663  , -0.30316295618  , -0.213465918948  , 0.052582163049  , 0.317193292712  , -0.297299909635  , -0.199676133632  , 0.5165671847  , 0.353183180969  , -0.584059722354  , 0.217556781682  , -0.581877759559  , -0.017416643632  , 0.248058034783  , 0.518216243671  , -0.45350642741  , 0.367488561536  , -0.411597655256  , 0.386891654348  , 0.128157419967  , -0.512863610837 );
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 5; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 32);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 32; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }