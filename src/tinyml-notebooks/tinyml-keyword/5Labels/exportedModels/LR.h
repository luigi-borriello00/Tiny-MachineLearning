#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LogisticRegression {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[5] = { 2.5290653e-05 ,7.37531e-06 ,-2.4795291e-05 ,-8.350294e-06 ,4.79622e-07  };
                        votes[0] += dot(x,   -0.000389687576  , 0.000314459568  , 0.000193560459  , -0.000181669232  , -0.000364049601  , 1.3827585e-05  , 0.000112650628  , 0.000219765152  , 0.0005613928  , 0.000172256024  , 0.000118853082  , -0.000678153245  , 0.00024202394  , 5.0987674e-05  , -0.000411627521  , 0.002073274392  , -0.001281983847  , -0.000803883749  , -0.001303746288  , 0.001879040701  , -0.001655927269  , -4.5382207e-05  , 0.001026834285  , -0.000909395459  , 0.00197831704  , -0.001542012297  , 0.000217894289  , -0.001368096002  , 0.002006927697  , -0.000115306347  , -0.001203711689  , 0.001088114765 );
                        votes[1] += dot(x,   -0.000156764218  , -0.000185329443  , -0.00032047758  , 0.000609172902  , -9.459941e-06  , -0.000277434251  , -0.000131669606  , 0.000217867346  , -0.000599418894  , -0.000206844197  , 0.000163526858  , 0.000338661709  , -0.000287668762  , -1.8396666e-05  , 0.00079949418  , -0.001293871242  , 0.001514210092  , 6.4173001e-05  , 0.000147535701  , 0.001750320286  , -0.00062944517  , -0.00016283345  , -0.000495880719  , -0.000558640832  , -0.000266212137  , 0.000303053643  , -0.000287157836  , 0.001580435283  , -0.001073703508  , -0.001019546248  , 5.692276e-06  , 0.001658085761 );
                        votes[2] += dot(x,   0.000340682449  , 0.00020155739  , -5.8222768e-05  , -0.000343996708  , -4.7041619e-05  , 0.000148224618  , -1.7141641e-05  , 9.6118018e-05  , 0.000494154736  , 7.753565e-06  , -0.000746888365  , 0.000146483773  , -2.4865758e-05  , 0.000575464589  , -0.001351686044  , 0.000569200415  , -0.00026638504  , 0.001626460949  , -0.001290371067  , -0.002522936472  , 0.003386717419  , 0.000517296665  , -0.001123454074  , 0.000327457062  , -0.001551754726  , -0.000146394102  , 0.001301437502  , -0.000525065907  , 0.000224382261  , 8.1262057e-05  , -0.000636791351  , -0.000696608819 );
                        votes[3] += dot(x,   -9.7351746e-05  , 0.000127267798  , 0.000145271519  , 6.3854189e-05  , 8.5598201e-05  , 0.000197861452  , 0.000199106498  , -0.000689064984  , -0.000412956433  , -0.000554295623  , 0.000231638332  , 0.000361863906  , 0.000707601321  , -0.000453227682  , 0.000657817922  , -0.001650039925  , 0.000502990125  , -0.00010290364  , -0.000344310473  , -0.002417861575  , 0.00113153744  , -0.000413418981  , 0.002536918627  , 0.001066693135  , -0.001256484542  , -0.000255595435  , -0.000626163881  , -0.000191044815  , 0.000266988152  , 0.000352007831  , 0.001665806704  , -0.000794370992 );
                        votes[4] += dot(x,   0.000303121091  , -0.000457955313  , 3.986837e-05  , -0.000147361151  , 0.000334952961  , -8.2479404e-05  , -0.000162945879  , 0.000155314469  , -4.317221e-05  , 0.000581130231  , 0.000232870093  , -0.000168856143  , -0.000637090741  , -0.000154827916  , 0.000306001462  , 0.000301436359  , -0.000468831331  , -0.000783846561  , 0.002790892127  , 0.00131143706  , -0.002232882421  , 0.000104337972  , -0.00194441812  , 7.3886094e-05  , 0.001096134364  , 0.001640948191  , -0.000606010075  , 0.00050377144  , -0.001424594601  , 0.000701582708  , 0.00016900406  , -0.001255220713 );
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 5; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 32);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 32; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }