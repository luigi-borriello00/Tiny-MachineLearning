#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class GaussianNB {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[2] = { 0.0f };
                        float theta[42] = { 0 };
                        float sigma[42] = { 0 };
                        theta[0] = 0.01625; theta[1] = -0.001666666667; theta[2] = 0.044166666667; theta[3] = 0.008333333333; theta[4] = 0.002083333333; theta[5] = 0.022083333333; theta[6] = 0.024166666667; theta[7] = 0.015416666667; theta[8] = 0.22625; theta[9] = 0.038333333333; theta[10] = 0.02875; theta[11] = 0.1575; theta[12] = 0.09; theta[13] = 0.00375; theta[14] = -0.272083333333; theta[15] = 0.075; theta[16] = 0.004166666667; theta[17] = -0.055; theta[18] = 0.01; theta[19] = 0.009166666667; theta[20] = 0.156666666667; theta[21] = -0.040833333333; theta[22] = -0.004583333333; theta[23] = 0.102916666667; theta[24] = -0.037083333333; theta[25] = -0.01; theta[26] = 0.05; theta[27] = -0.019583333333; theta[28] = -0.0175; theta[29] = 0.03875; theta[30] = -0.017916666667; theta[31] = -0.0125; theta[32] = 0.043333333333; theta[33] = -0.023333333333; theta[34] = -0.020416666667; theta[35] = 0.041666666667; theta[36] = -0.020416666667; theta[37] = -0.01; theta[38] = 0.038333333333; theta[39] = -0.025416666667; theta[40] = -0.019583333333; theta[41] = 0.051666666667;
                        sigma[0] = 0.002965104446; sigma[1] = 0.001030555835; sigma[2] = 0.037682639168; sigma[3] = 0.001797222502; sigma[4] = 0.003658160002; sigma[5] = 0.039308160002; sigma[6] = 0.003699305835; sigma[7] = 0.032391493335; sigma[8] = 0.042781771113; sigma[9] = 0.004680555835; sigma[10] = 0.014452604446; sigma[11] = 0.084477083613; sigma[12] = 0.002383333613; sigma[13] = 0.008073437779; sigma[14] = 0.088983160002; sigma[15] = 0.006608333613; sigma[16] = 0.032715972502; sigma[17] = 0.028583333613; sigma[18] = 0.004400000279; sigma[19] = 0.042540972502; sigma[20] = 0.030122222502; sigma[21] = 0.002732639168; sigma[22] = 0.016991493335; sigma[23] = 0.062520660002; sigma[24] = 0.003028993335; sigma[25] = 0.016208333613; sigma[26] = 0.039875000279; sigma[27] = 0.001687326668; sigma[28] = 0.025302083613; sigma[29] = 0.035869271113; sigma[30] = 0.001816493335; sigma[31] = 0.023993750279; sigma[32] = 0.036413889168; sigma[33] = 0.001847222502; sigma[34] = 0.027403993335; sigma[35] = 0.041147222502; sigma[36] = 0.002462326668; sigma[37] = 0.025891666946; sigma[38] = 0.039905555835; sigma[39] = 0.001991493335; sigma[40] = 0.023545660002; sigma[41] = 0.037130555835;
                        votes[0] = 0.5 - gauss(x, theta, sigma);
                        theta[0] = 0.000833333333; theta[1] = -0.005; theta[2] = 0.127916666667; theta[3] = 0.0; theta[4] = -0.009583333333; theta[5] = 0.123333333333; theta[6] = -0.017916666667; theta[7] = 0.114583333333; theta[8] = 0.22; theta[9] = -0.026666666667; theta[10] = -0.054166666667; theta[11] = 0.225416666667; theta[12] = 0.028333333333; theta[13] = -0.0225; theta[14] = -0.045416666667; theta[15] = 0.061666666667; theta[16] = 0.096666666667; theta[17] = -0.020833333333; theta[18] = 0.019166666667; theta[19] = 0.123333333333; theta[20] = 0.150416666667; theta[21] = -0.040833333333; theta[22] = 0.070416666667; theta[23] = 0.165416666667; theta[24] = -0.0575; theta[25] = 0.04875; theta[26] = 0.135833333333; theta[27] = -0.053333333333; theta[28] = 0.035833333333; theta[29] = 0.1225; theta[30] = -0.045; theta[31] = 0.031666666667; theta[32] = 0.123333333333; theta[33] = -0.03; theta[34] = 0.011666666667; theta[35] = 0.1175; theta[36] = -0.014166666667; theta[37] = -0.0125; theta[38] = 0.0225; theta[39] = -0.029583333333; theta[40] = -0.004583333333; theta[41] = 0.12375;
                        sigma[0] = 0.000232639168; sigma[1] = 0.001616666946; sigma[2] = 0.105666493335; sigma[3] = 0.000150000279; sigma[4] = 0.002712326668; sigma[5] = 0.104297222502; sigma[6] = 0.004249826668; sigma[7] = 0.043249826668; sigma[8] = 0.132108333613; sigma[9] = 0.008247222502; sigma[10] = 0.058515972502; sigma[11] = 0.192708160002; sigma[12] = 0.014463889168; sigma[13] = 0.036827083613; sigma[14] = 0.113833160002; sigma[15] = 0.009997222502; sigma[16] = 0.041897222502; sigma[17] = 0.119849305835; sigma[18] = 0.005424305835; sigma[19] = 0.021872222502; sigma[20] = 0.120378993335; sigma[21] = 0.004632639168; sigma[22] = 0.022128993335; sigma[23] = 0.102466493335; sigma[24] = 0.003527083613; sigma[25] = 0.015935937779; sigma[26] = 0.106032639168; sigma[27] = 0.002963889168; sigma[28] = 0.009040972502; sigma[29] = 0.106093750279; sigma[30] = 0.003316666946; sigma[31] = 0.003005555835; sigma[32] = 0.095722222502; sigma[33] = 0.004441666946; sigma[34] = 0.006405555835; sigma[35] = 0.098343750279; sigma[36] = 0.010007639168; sigma[37] = 0.032185416946; sigma[38] = 0.185377083613; sigma[39] = 0.002903993335; sigma[40] = 0.017933160002; sigma[41] = 0.099723437779;
                        votes[1] = 0.5 - gauss(x, theta, sigma);
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 2; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute gaussian value
                    */
                    float gauss(float *x, float *theta, float *sigma) {
                        float gauss = 0.0f;

                        for (uint16_t i = 0; i < 42; i++) {
                            gauss += log(sigma[i]);
                            gauss += abs(x[i] - theta[i]) / sigma[i];
                        }

                        return gauss;
                    }
                };
            }
        }
    }