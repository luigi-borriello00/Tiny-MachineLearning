#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class GaussianNB {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[2] = { 0.0f };
                        float theta[60] = { 0 };
                        float sigma[60] = { 0 };
                        theta[0] = -0.057812263437; theta[1] = -0.011521574565; theta[2] = 0.982414837245; theta[3] = -0.057971233914; theta[4] = -0.011400454201; theta[5] = 0.982482967449; theta[6] = -0.057842543528; theta[7] = -0.011566994701; theta[8] = 0.982467827403; theta[9] = -0.057895533687; theta[10] = -0.011317183952; theta[11] = 0.982528387585; theta[12] = -0.057834973505; theta[13] = -0.011468584406; theta[14] = 0.982505677517; theta[15] = -0.05781983346; theta[16] = -0.011309613929; theta[17] = 0.982490537472; theta[18] = -0.057986373959; theta[19] = -0.011211203634; theta[20] = 0.982672218017; theta[21] = -0.057918243755; theta[22] = -0.011233913702; theta[23] = 0.98251324754; theta[24] = -0.057948523846; theta[25] = -0.011203633611; theta[26] = 0.982528387585; theta[27] = -0.057887963664; theta[28] = -0.011408024224; theta[29] = 0.982558667676; theta[30] = -0.057880393641; theta[31] = -0.011294473883; theta[32] = 0.982846328539; theta[33] = -0.057842543528; theta[34] = -0.011203633611; theta[35] = 0.982717638153; theta[36] = -0.057910673732; theta[37] = -0.011150643452; theta[38] = 0.98279333838; theta[39] = -0.058046934141; theta[40] = -0.011135503407; theta[41] = 0.982679788039; theta[42] = -0.057751703255; theta[43] = -0.011362604088; theta[44] = 0.982694928085; theta[45] = -0.057759273278; theta[46] = -0.011831945496; theta[47] = 0.982399697199; theta[48] = -0.057827403482; theta[49] = -0.011332323997; theta[50] = 0.982702498108; theta[51] = -0.057978803936; theta[52] = -0.011271763815; theta[53] = 0.982551097653; theta[54] = -0.057910673732; theta[55] = -0.011302043906; theta[56] = 0.982672218017; theta[57] = -0.057993943982; theta[58] = -0.01125662377; theta[59] = 0.982558667676;
                        sigma[0] = 4.5857261e-05; sigma[1] = 0.000202302525; sigma[2] = 8.2964928e-05; sigma[3] = 4.7965865e-05; sigma[4] = 0.000203716246; sigma[5] = 8.270694e-05; sigma[6] = 4.5686033e-05; sigma[7] = 0.000206250054; sigma[8] = 8.0208087e-05; sigma[9] = 4.7804379e-05; sigma[10] = 0.000203109842; sigma[11] = 8.0511118e-05; sigma[12] = 4.8000019e-05; sigma[13] = 0.000205716084; sigma[14] = 8.2366547e-05; sigma[15] = 4.5663226e-05; sigma[16] = 0.000206687637; sigma[17] = 8.1230986e-05; sigma[18] = 4.6664463e-05; sigma[19] = 0.000204589005; sigma[20] = 8.1655618e-05; sigma[21] = 4.6763945e-05; sigma[22] = 0.00020264097; sigma[23] = 8.2707054e-05; sigma[24] = 4.6434898e-05; sigma[25] = 0.000207710994; sigma[26] = 8.1722321e-05; sigma[27] = 4.5879954e-05; sigma[28] = 0.000201499679; sigma[29] = 8.2476687e-05; sigma[30] = 4.7740426e-05; sigma[31] = 0.000200519645; sigma[32] = 8.1224682e-05; sigma[33] = 4.5080431e-05; sigma[34] = 0.000205288587; sigma[35] = 7.9745405e-05; sigma[36] = 4.6656669e-05; sigma[37] = 0.000205943242; sigma[38] = 8.1447829e-05; sigma[39] = 4.7510288e-05; sigma[40] = 0.000202798445; sigma[41] = 8.2902007e-05; sigma[42] = 4.5588614e-05; sigma[43] = 0.000206924537; sigma[44] = 8.176083e-05; sigma[45] = 4.5546896e-05; sigma[46] = 0.000200580388; sigma[47] = 8.1221015e-05; sigma[48] = 4.6074677e-05; sigma[49] = 0.000201858524; sigma[50] = 8.0887269e-05; sigma[51] = 4.6709619e-05; sigma[52] = 0.00020595264; sigma[53] = 8.2136867e-05; sigma[54] = 4.6656669e-05; sigma[55] = 0.000203603698; sigma[56] = 8.0595815e-05; sigma[57] = 4.6770592e-05; sigma[58] = 0.000202205909; sigma[59] = 8.2779488e-05;
                        votes[0] = 0.608475356978 - gauss(x, theta, sigma);
                        theta[0] = -0.066070588235; theta[1] = -0.030870588235; theta[2] = 0.981035294118; theta[3] = -0.0662; theta[4] = -0.030682352941; theta[5] = 0.981117647059; theta[6] = -0.066094117647; theta[7] = -0.030552941176; theta[8] = 0.981247058824; theta[9] = -0.066011764706; theta[10] = -0.030905882353; theta[11] = 0.980741176471; theta[12] = -0.066235294118; theta[13] = -0.030682352941; theta[14] = 0.980882352941; theta[15] = -0.066270588235; theta[16] = -0.030305882353; theta[17] = 0.981188235294; theta[18] = -0.0662; theta[19] = -0.030211764706; theta[20] = 0.981364705882; theta[21] = -0.066011764706; theta[22] = -0.030517647059; theta[23] = 0.981188235294; theta[24] = -0.066047058824; theta[25] = -0.030776470588; theta[26] = 0.981023529412; theta[27] = -0.066211764706; theta[28] = -0.030141176471; theta[29] = 0.981258823529; theta[30] = -0.066070588235; theta[31] = -0.030505882353; theta[32] = 0.981117647059; theta[33] = -0.066035294118; theta[34] = -0.030823529412; theta[35] = 0.980847058824; theta[36] = -0.066058823529; theta[37] = -0.030729411765; theta[38] = 0.980988235294; theta[39] = -0.066070588235; theta[40] = -0.030705882353; theta[41] = 0.9808; theta[42] = -0.066058823529; theta[43] = -0.030341176471; theta[44] = 0.981388235294; theta[45] = -0.066058823529; theta[46] = -0.030670588235; theta[47] = 0.980976470588; theta[48] = -0.066211764706; theta[49] = -0.030847058824; theta[50] = 0.981176470588; theta[51] = -0.065988235294; theta[52] = -0.030458823529; theta[53] = 0.980976470588; theta[54] = -0.0662; theta[55] = -0.030905882353; theta[56] = 0.980835294118; theta[57] = -0.0662; theta[58] = -0.030235294118; theta[59] = 0.981188235294;
                        sigma[0] = 3.7736194e-05; sigma[1] = 0.000232418547; sigma[2] = 0.000142222284; sigma[3] = 3.7442354e-05; sigma[4] = 0.000235769689; sigma[5] = 0.000138397924; sigma[6] = 3.6744084e-05; sigma[7] = 0.000234164845; sigma[8] = 0.000142444845; sigma[9] = 3.4799862e-05; sigma[10] = 0.00023388526; sigma[11] = 0.000143803599; sigma[12] = 3.665052e-05; sigma[13] = 0.000236004983; sigma[14] = 0.000143339101; sigma[15] = 3.6797371e-05; sigma[16] = 0.000235200554; sigma[17] = 0.000146235156; sigma[18] = 3.6265883e-05; sigma[19] = 0.000231484568; sigma[20] = 0.000144961108; sigma[21] = 3.6446921e-05; sigma[22] = 0.000237849689; sigma[23] = 0.000145529274; sigma[24] = 3.7786021e-05; sigma[25] = 0.000231632388; sigma[26] = 0.000145658271; sigma[27] = 3.5531627e-05; sigma[28] = 0.000231744776; sigma[29] = 0.000142297717; sigma[30] = 3.5618547e-05; sigma[31] = 0.000235626437; sigma[32] = 0.000144750866; sigma[33] = 3.6398755e-05; sigma[34] = 0.000232733565; sigma[35] = 0.000141164845; sigma[36] = 3.7290658e-05; sigma[37] = 0.000236879724; sigma[38] = 0.000145141039; sigma[39] = 3.632443e-05; sigma[40] = 0.000231972319; sigma[41] = 0.000142418824; sigma[42] = 3.6114187e-05; sigma[43] = 0.00023506007; sigma[44] = 0.000143249274; sigma[45] = 3.6114187e-05; sigma[46] = 0.00023684443; sigma[47] = 0.000144811212; sigma[48] = 3.5296333e-05; sigma[49] = 0.00023575308; sigma[50] = 0.000140733565; sigma[51] = 3.6964568e-05; sigma[52] = 0.000233554187; sigma[53] = 0.000143399447; sigma[54] = 3.7207059e-05; sigma[55] = 0.000233414672; sigma[56] = 0.000144596402; sigma[57] = 3.6736471e-05; sigma[58] = 0.000230768167; sigma[59] = 0.000141058686;
                        votes[1] = 0.391524643022 - gauss(x, theta, sigma);
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 2; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute gaussian value
                    */
                    float gauss(float *x, float *theta, float *sigma) {
                        float gauss = 0.0f;

                        for (uint16_t i = 0; i < 60; i++) {
                            gauss += log(sigma[i]);
                            gauss += abs(x[i] - theta[i]) / sigma[i];
                        }

                        return gauss;
                    }
                };
            }
        }
    }