#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class GaussianNB {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[2] = { 0.0f };
                        float theta[60] = { 0 };
                        float sigma[60] = { 0 };
                        theta[0] = -0.040027777778; theta[1] = -0.013798611111; theta[2] = 0.981868055556; theta[3] = -0.039972222222; theta[4] = -0.014131944444; theta[5] = 0.981847222222; theta[6] = -0.040083333333; theta[7] = -0.013826388889; theta[8] = 0.981875; theta[9] = -0.039993055556; theta[10] = -0.014166666667; theta[11] = 0.981847222222; theta[12] = -0.040027777778; theta[13] = -0.013791666667; theta[14] = 0.981833333333; theta[15] = -0.040027777778; theta[16] = -0.014027777778; theta[17] = 0.981756944444; theta[18] = -0.040020833333; theta[19] = -0.013916666667; theta[20] = 0.981875; theta[21] = -0.039965277778; theta[22] = -0.014159722222; theta[23] = 0.981840277778; theta[24] = -0.040006944444; theta[25] = -0.0139375; theta[26] = 0.981826388889; theta[27] = -0.040027777778; theta[28] = -0.014104166667; theta[29] = 0.981791666667; theta[30] = -0.040034722222; theta[31] = -0.013840277778; theta[32] = 0.981840277778; theta[33] = -0.04; theta[34] = -0.014048611111; theta[35] = 0.981840277778; theta[36] = -0.040090277778; theta[37] = -0.014055555556; theta[38] = 0.981833333333; theta[39] = -0.039986111111; theta[40] = -0.013881944444; theta[41] = 0.981798611111; theta[42] = -0.039972222222; theta[43] = -0.014194444444; theta[44] = 0.981833333333; theta[45] = -0.040006944444; theta[46] = -0.013944444444; theta[47] = 0.981861111111; theta[48] = -0.0399375; theta[49] = -0.014166666667; theta[50] = 0.981819444444; theta[51] = -0.040083333333; theta[52] = -0.014006944444; theta[53] = 0.981861111111; theta[54] = -0.039972222222; theta[55] = -0.013965277778; theta[56] = 0.981798611111; theta[57] = -0.040013888889; theta[58] = -0.014027777778; theta[59] = 0.981805555556;
                        sigma[0] = 5.8193673e-05; sigma[1] = 0.000139806665; sigma[2] = 1.5329813e-05; sigma[3] = 5.8193673e-05; sigma[4] = 0.000136468702; sigma[5] = 1.5198881e-05; sigma[6] = 5.7770834e-05; sigma[7] = 0.000138900415; sigma[8] = 1.5373264e-05; sigma[9] = 5.8541619e-05; sigma[10] = 0.000137361111; sigma[11] = 1.5198881e-05; sigma[12] = 5.861034e-05; sigma[13] = 0.000136039931; sigma[14] = 1.5111111e-05; sigma[15] = 5.8193673e-05; sigma[16] = 0.000137665895; sigma[17] = 1.462148e-05; sigma[18] = 5.8263455e-05; sigma[19] = 0.000138270834; sigma[20] = 1.5373264e-05; sigma[21] = 5.7984906e-05; sigma[22] = 0.0001397106; sigma[23] = 1.5155045e-05; sigma[24] = 5.6736063e-05; sigma[25] = 0.000140954427; sigma[26] = 1.5067082e-05; sigma[27] = 5.736034e-05; sigma[28] = 0.000141419705; sigma[29] = 1.4845486e-05; sigma[30] = 5.6734906e-05; sigma[31] = 0.000139766156; sigma[32] = 1.5155045e-05; sigma[33] = 5.7083334e-05; sigma[34] = 0.000138678193; sigma[35] = 1.5155045e-05; sigma[36] = 5.7977961e-05; sigma[37] = 0.000138691358; sigma[38] = 1.5111111e-05; sigma[39] = 5.722203e-05; sigma[40] = 0.000137638841; sigma[41] = 1.4889998e-05; sigma[42] = 5.6804784e-05; sigma[43] = 0.000139489969; sigma[44] = 1.5111111e-05; sigma[45] = 5.715273e-05; sigma[46] = 0.000138469136; sigma[47] = 1.5147377e-05; sigma[48] = 5.7982205e-05; sigma[49] = 0.000139027778; sigma[50] = 1.4884067e-05; sigma[51] = 5.81875e-05; sigma[52] = 0.000137208285; sigma[53] = 1.5286266e-05; sigma[54] = 5.8888118e-05; sigma[55] = 0.000135734906; sigma[56] = 1.4889998e-05; sigma[57] = 5.8888696e-05; sigma[58] = 0.000136554784; sigma[59] = 1.4934414e-05;
                        votes[0] = 0.5 - gauss(x, theta, sigma);
                        theta[0] = -0.0395625; theta[1] = -0.013965277778; theta[2] = 0.980902777778; theta[3] = -0.039548611111; theta[4] = -0.014333333333; theta[5] = 0.980819444444; theta[6] = -0.039618055556; theta[7] = -0.014145833333; theta[8] = 0.980833333333; theta[9] = -0.039465277778; theta[10] = -0.014125; theta[11] = 0.980916666667; theta[12] = -0.039479166667; theta[13] = -0.014305555556; theta[14] = 0.980847222222; theta[15] = -0.039541666667; theta[16] = -0.014034722222; theta[17] = 0.980826388889; theta[18] = -0.039444444444; theta[19] = -0.0143125; theta[20] = 0.980861111111; theta[21] = -0.039715277778; theta[22] = -0.014222222222; theta[23] = 0.980916666667; theta[24] = -0.039520833333; theta[25] = -0.014083333333; theta[26] = 0.980916666667; theta[27] = -0.0395625; theta[28] = -0.014430555556; theta[29] = 0.980805555556; theta[30] = -0.039541666667; theta[31] = -0.013840277778; theta[32] = 0.980854166667; theta[33] = -0.039541666667; theta[34] = -0.0145; theta[35] = 0.980847222222; theta[36] = -0.039645833333; theta[37] = -0.013951388889; theta[38] = 0.980881944444; theta[39] = -0.039458333333; theta[40] = -0.014305555556; theta[41] = 0.980881944444; theta[42] = -0.039555555556; theta[43] = -0.014138888889; theta[44] = 0.980895833333; theta[45] = -0.039486111111; theta[46] = -0.014118055556; theta[47] = 0.980916666667; theta[48] = -0.039493055556; theta[49] = -0.014284722222; theta[50] = 0.980895833333; theta[51] = -0.039513888889; theta[52] = -0.014055555556; theta[53] = 0.980833333333; theta[54] = -0.039493055556; theta[55] = -0.014208333333; theta[56] = 0.980833333333; theta[57] = -0.039527777778; theta[58] = -0.014131944444; theta[59] = 0.980909722222;
                        sigma[0] = 2.2516927e-05; sigma[1] = 0.000127262684; sigma[2] = 8.21277e-06; sigma[3] = 2.3337915e-05; sigma[4] = 0.000128444445; sigma[5] = 8.356289e-06; sigma[6] = 2.2979119e-05; sigma[7] = 0.000128159288; sigma[8] = 8.472222e-06; sigma[9] = 2.4089072e-05; sigma[10] = 0.000128401042; sigma[11] = 9.159722e-06; sigma[12] = 2.45204e-05; sigma[13] = 0.000125351081; sigma[14] = 8.58777e-06; sigma[15] = 2.3817709e-05; sigma[16] = 0.000126151572; sigma[17] = 8.414304e-06; sigma[18] = 2.4413581e-05; sigma[19] = 0.000126471788; sigma[20] = 8.702932e-06; sigma[21] = 2.3043934e-05; sigma[22] = 0.000126339506; sigma[23] = 9.159722e-06; sigma[24] = 2.3728733e-05; sigma[25] = 0.000126520834; sigma[26] = 8.326389e-06; sigma[27] = 2.4183594e-05; sigma[28] = 0.000126620178; sigma[29] = 8.239969e-06; sigma[30] = 2.3956597e-05; sigma[31] = 0.0001267106; sigma[32] = 8.6454e-06; sigma[33] = 2.4373264e-05; sigma[34] = 0.000125861111; sigma[35] = 8.58777e-06; sigma[36] = 2.38329e-05; sigma[37] = 0.000125011526; sigma[38] = 8.874952e-06; sigma[39] = 2.3873264e-05; sigma[40] = 0.000126462192; sigma[41] = 8.874952e-06; sigma[42] = 2.3691358e-05; sigma[43] = 0.000126341821; sigma[44] = 8.98915e-06; sigma[45] = 2.3763696e-05; sigma[46] = 0.000127416619; sigma[47] = 8.326389e-06; sigma[48] = 2.3562452e-05; sigma[49] = 0.000127682822; sigma[50] = 8.98915e-06; sigma[51] = 2.4208141e-05; sigma[52] = 0.000125913581; sigma[53] = 8.472222e-06; sigma[54] = 2.4673563e-05; sigma[55] = 0.000127012153; sigma[56] = 8.472222e-06; sigma[57] = 2.3804784e-05; sigma[58] = 0.000126468702; sigma[59] = 8.269628e-06;
                        votes[1] = 0.5 - gauss(x, theta, sigma);
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 2; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute gaussian value
                    */
                    float gauss(float *x, float *theta, float *sigma) {
                        float gauss = 0.0f;

                        for (uint16_t i = 0; i < 60; i++) {
                            gauss += log(sigma[i]);
                            gauss += abs(x[i] - theta[i]) / sigma[i];
                        }

                        return gauss;
                    }
                };
            }
        }
    }