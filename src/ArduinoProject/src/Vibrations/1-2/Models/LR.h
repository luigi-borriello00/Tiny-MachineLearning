#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LogisticRegression {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[2] = { 0.680944717301  };
                        votes[0] += dot(x,   0.304644179797  , -0.11736053527  , -0.024945358014  , 0.276115935683  , -0.175165360945  , -0.071938932037  , 0.302251749084  , -0.20210825657  , -0.07699477858  , 0.356144773357  , -0.026759347687  , -0.005539622303  , 0.353510386546  , -0.322896659971  , -0.034446483008  , 0.336033252846  , -0.065489287995  , -0.007897421029  , 0.365159813433  , -0.251608985222  , -0.05311635274  , 0.171093380712  , -0.075061016982  , -0.002384003646  , 0.303067742889  , -0.116453893057  , 0.01767007709  , 0.317573436409  , -0.215148087227  , -0.040820983037  , 0.320216931706  , -0.056188966735  , -0.043360528289  , 0.297334332798  , -0.272933428782  , -0.040148415367  , 0.300586998673  , 0.004669379979  , -0.022884532192  , 0.334829436972  , -0.258882576477  , 0.016405127937  , 0.286464062073  , -0.009024772898  , -0.012959469683  , 0.329603801321  , -0.111333375157  , -0.005148907879  , 0.303084650529  , -0.100981994691  , 0.000366183889  , 0.370579219886  , -0.048692021612  , -0.068425458438  , 0.320094547136  , -0.172567667854  , -0.027121646175  , 0.317121597327  , -0.09538356752  , 0.024102973582 );
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 2; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 60);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 60; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }