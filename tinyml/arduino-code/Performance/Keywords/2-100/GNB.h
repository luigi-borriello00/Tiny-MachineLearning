#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class GaussianNB {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[2] = { 0.0f };
                        float theta[32] = { 0 };
                        float sigma[32] = { 0 };
                        theta[0] = 0.448514071703; theta[1] = 0.253264240248; theta[2] = 0.14372954203; theta[3] = 0.031567336921; theta[4] = 0.143007706942; theta[5] = 0.118055543737; theta[6] = 0.214718451079; theta[7] = 0.351563185001; theta[8] = 0.27564633017; theta[9] = 0.222299071948; theta[10] = 0.058441771371; theta[11] = 0.07069100166; theta[12] = 0.040532362368; theta[13] = -0.035146005798; theta[14] = -0.078446553856; theta[15] = -0.060347261756; theta[16] = -0.047095388746; theta[17] = -0.031095016478; theta[18] = -0.036530373097; theta[19] = -0.004133421809; theta[20] = 0.000546781022; theta[21] = 0.029743017289; theta[22] = 0.072722234325; theta[23] = 0.201734343192; theta[24] = 0.28829629515; theta[25] = 0.386103608117; theta[26] = 0.537302375435; theta[27] = 0.590160124567; theta[28] = 0.68558792742; theta[29] = 0.528704209951; theta[30] = 0.42853119279; theta[31] = 0.188646123877;
                        sigma[0] = 1.648289341721; sigma[1] = 0.820703936402; sigma[2] = 0.72763919665; sigma[3] = 0.693866462212; sigma[4] = 0.599004389494; sigma[5] = 0.356507710152; sigma[6] = 0.33306115376; sigma[7] = 0.291656577946; sigma[8] = 0.314420045221; sigma[9] = 0.323961599134; sigma[10] = 0.285717502847; sigma[11] = 0.246245948335; sigma[12] = 0.182879143809; sigma[13] = 0.12373042262; sigma[14] = 0.058462022806; sigma[15] = 0.050857088834; sigma[16] = 0.030990047495; sigma[17] = 0.042132577961; sigma[18] = 0.078254232661; sigma[19] = 0.274891745069; sigma[20] = 0.486405979469; sigma[21] = 1.012077207959; sigma[22] = 1.500955091069; sigma[23] = 3.554791184849; sigma[24] = 4.486727695328; sigma[25] = 5.697918378114; sigma[26] = 9.963188991058; sigma[27] = 11.887375118329; sigma[28] = 12.890850172589; sigma[29] = 9.24944671946; sigma[30] = 4.176766967917; sigma[31] = 1.698402141575;
                        votes[0] = 0.5 - gauss(x, theta, sigma);
                        theta[0] = 0.479205242711; theta[1] = 0.065864026259; theta[2] = 0.199558878778; theta[3] = 0.013998480583; theta[4] = -0.036895770945; theta[5] = -0.214033697333; theta[6] = -0.164844453738; theta[7] = -0.047458572933; theta[8] = -0.04452223006; theta[9] = 0.067776648557; theta[10] = 0.376051045979; theta[11] = 0.59396640793; theta[12] = 0.708754754239; theta[13] = 0.787176726396; theta[14] = 0.823141323141; theta[15] = 0.846532208052; theta[16] = 0.81878716336; theta[17] = 0.845239164249; theta[18] = 0.797156945886; theta[19] = 0.927299950112; theta[20] = 1.016074902567; theta[21] = 1.251707635152; theta[22] = 1.43272381073; theta[23] = 1.686028170736; theta[24] = 1.560941442348; theta[25] = 1.41928048403; theta[26] = 1.436594024975; theta[27] = 1.137222054377; theta[28] = 0.843942989998; theta[29] = 0.940157355723; theta[30] = 0.966916026908; theta[31] = 0.983432210268;
                        sigma[0] = 2.788155002888; sigma[1] = 1.332436904115; sigma[2] = 1.393792188704; sigma[3] = 1.615045229271; sigma[4] = 1.002969707159; sigma[5] = 0.549027733063; sigma[6] = 0.436856766712; sigma[7] = 0.438758714191; sigma[8] = 0.467654884041; sigma[9] = 0.493658130372; sigma[10] = 0.76966529278; sigma[11] = 0.9503373164; sigma[12] = 0.811196057883; sigma[13] = 0.86748074894; sigma[14] = 0.685888798112; sigma[15] = 0.645368521695; sigma[16] = 0.473445670755; sigma[17] = 0.528803532043; sigma[18] = 0.530939575544; sigma[19] = 0.946433938817; sigma[20] = 1.543567521118; sigma[21] = 2.841038414804; sigma[22] = 4.599684512374; sigma[23] = 6.988357798579; sigma[24] = 7.724816343588; sigma[25] = 9.262333668105; sigma[26] = 10.850147419285; sigma[27] = 7.634773419913; sigma[28] = 3.749741474793; sigma[29] = 5.785675446859; sigma[30] = 6.485448947857; sigma[31] = 9.719714226758;
                        votes[1] = 0.5 - gauss(x, theta, sigma);
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 2; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute gaussian value
                    */
                    float gauss(float *x, float *theta, float *sigma) {
                        float gauss = 0.0f;

                        for (uint16_t i = 0; i < 32; i++) {
                            gauss += log(sigma[i]);
                            gauss += abs(x[i] - theta[i]) / sigma[i];
                        }

                        return gauss;
                    }
                };
            }
        }
    }