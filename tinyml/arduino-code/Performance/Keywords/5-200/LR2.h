#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LogisticRegression {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[5] = { -1.271153529774 ,-2.598828997536 ,-1.855769128125 ,-1.270887359597 ,-1.51477379707  };
                        votes[0] += dot(x,   -0.922553193941  , 0.314180320759  , 0.336460796929  , 0.08739458764  , -0.832507508215  , -0.663249652275  , 0.256476145778  , 0.814582249068  , 0.57567831183  , -0.22940491791  , 0.855126902212  , -0.449305997547  , 0.025296788656  , -0.115964736188  , -0.342203436501  , 0.570275461391  , -0.683837142976  , -0.564302107519  , -0.818581049799  , 0.965161818465  , -0.542254740967  , -0.240841786594  , 0.193126322563  , -0.232336734417  , 1.195908639649  , -0.603267949242  , -0.771714180457  , -0.48468836893  , 1.425129934921  , 0.077585980639  , -1.111746461409  , 0.407862274921 );
                        votes[1] += dot(x,   0.306896082228  , -1.045862248087  , -0.795977646906  , 1.582459681085  , 0.605892923205  , -0.694766327178  , -0.119331656618  , -0.443537219595  , -0.929292761252  , -0.595024708552  , 0.633084291023  , 0.574496537449  , -0.302851878836  , -0.281188528405  , 0.364785517958  , 0.127348679461  , 0.295401054049  , 0.65901021325  , -0.175886100321  , 0.187008455785  , -0.163619220569  , 0.664015048732  , -0.299272423283  , -0.815886474078  , 0.561239456449  , -0.081406208915  , -0.323992713444  , 0.99506188019  , -0.835399480473  , 0.392991682141  , -0.516114644689  , 0.24663038702 );
                        votes[2] += dot(x,   1.026353187947  , 0.084965590043  , -0.276733698278  , -0.239039420292  , -0.101078746215  , 0.421424324979  , -0.019884627474  , 0.198332630551  , 0.245513328945  , 0.513177043654  , -1.297674154384  , 0.359682164821  , 0.180756234054  , 0.240071366628  , -0.693640751529  , 0.205030207125  , -0.017586567048  , -0.333642744943  , 0.248627104764  , -0.924709083473  , 1.355314301537  , -0.483928419852  , -0.135573935767  , 0.387288354721  , -0.593511490721  , -0.001689302583  , 0.792615148782  , -0.893224167368  , 0.608173674231  , -0.215033551203  , -0.176097422361  , 0.134951961376 );
                        votes[3] += dot(x,   -0.442409295278  , 0.485054084705  , 0.483821545819  , -0.358299317222  , -0.211741775586  , 0.843578687587  , 0.211966589066  , -0.999344841619  , -0.949177897414  , -0.379696740082  , -0.466811980665  , 0.111988824266  , 1.040524395513  , -0.219431881333  , 0.002826422151  , -0.529496603348  , -0.233204561855  , 0.285773590478  , -0.18522307276  , -0.86839948422  , -0.501809425419  , 0.636774665999  , 0.105750733658  , 0.436788415661  , -0.345462232091  , 0.359927982316  , -0.591991489221  , 0.38988467221  , -0.144192035726  , 0.012973125525  , 0.580069832101  , -0.169539752337 );
                        votes[4] += dot(x,   0.401663691519  , -0.909733121499  , -0.162466445858  , -0.228212629711  , 0.823318528054  , -0.499273024153  , -0.173826649917  , 0.240513426954  , 0.433891441882  , 0.249418835286  , -0.00516088363  , -0.140503921851  , -0.765490612114  , -0.020345713504  , 0.241785710946  , 0.28142136828  , -0.235666505458  , 0.075340158874  , 0.050922027925  , 0.665510622822  , -0.56005521545  , -0.228231564302  , 0.286103842894  , -0.346019564808  , -0.37685861596  , 0.810057083017  , -0.377044623645  , 0.280066917894  , -0.357744821779  , 0.043174418567  , 0.285627655462  , -0.425859281228 );
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 5; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 32);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 32; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }