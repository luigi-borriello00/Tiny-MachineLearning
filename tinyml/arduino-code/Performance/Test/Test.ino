#include <EloquentTinyML.h>      // https://github.com/eloquentarduino/EloquentTinyML
/* Uncomment the model that yout want to test */
//#include "RF.h"            // model file
//#include "CART.h"            // model file
//#include "SVC.h"            // model file
#include "LR.h"           // model file
//#include "GNB.h"            // model file
//#define NUMBER_OF_LABELS   7     // number of voice labels
#define NUMBER_OF_LABELS   3     // number of voice labels
//const String words[NUMBER_OF_LABELS] = {"229658", "30a161", "3dab6b", "49b675", "55c17f", "60cc89", "6bd793"};  // words for each label
const String words[NUMBER_OF_LABELS] = {"229658", "49b675", "6bd793"};  // words for each label
#define FEATURE_SIZE 5
#define TEST_SIZE 100

/* Uncomment the model that yout want to test */
//Eloquent::ML::Port::RandomForest model;
//Eloquent::ML::Port::DecisionTree model;
Eloquent::ML::Port::LogisticRegression model;
//Eloquent::ML::Port::SVM model;
//Eloquent::ML::Port::GaussianNB model;

int X_test [100][5] = {{ 100,  112,  110, 1012,    0},
       {  22,  111,  101, 1001,    0},
       {  21,  102,  100,  220,    0},
       {  22,  111,  102, 1010,    0},
       {  22,  110,  101, 1000,    0},
       { 100,  112,  102, 1011,    0},
       { 100,  110,  101, 1001,    0},
       {  22,  110,  101, 1001,    0},
       { 100,  111,  110, 1011,    0},
       { 100,  111,  102, 1011,    0},
       { 100,  112,  102, 1011,    0},
       { 100,  111,  102, 1010,    0},
       { 101,  120,  112, 1101,    0},
       {  22,  110,  101, 1000,    0},
       {  21,  101,   22,  212,    0},
       {  22,  110,  101, 1000,    0},
       {  20,  100,   21,  202,    0},
       { 101,  112,  110, 1012,    0},
       {  22,  111,  102, 1002,    0},
       {  20,  101,   22,  210,    0},
       {  21,  102,  100,  212,    0},
       {  22,  102,  100, 1000,    0},
       {  21,  102,  100,  220,    0},
       { 101,  112,  110, 1012,    0},
       {  22,  111,  102, 1010,    0},
       {  22,  111,  102, 1010,    0},
       {  22,  110,  100,  221,    0},
       { 100,  111,  101, 1002,    0},
       {  22,  102,  100,  221,    0},
       { 100,  111,  101, 1001,    0},
       {  11,   21,   12,  112,    0},
       {  22,  110,  101,  222,    0},
       {  21,  102,  100,  220,    0},
       {  21,  102,  100,  221,    0},
       {  20,  100,   22,  202,    0},
       {  22,  110,  101,  222,    0},
       {  22,  110,  101, 1001,    0},
       {  22,  111,  102, 1001,    0},
       {  22,  111,  101, 1001,    0},
       {  21,  102,  100,  220,    0},
       {  22,  110,  100,  222,    0},
       { 100,  112,  110, 1011,    0},
       { 100,  111,  101, 1001,    0},
       { 100,  112,  110, 1010,    0},
       {  20,  101,   22,  211,    0},
       {  20,  100,   22,  202,    0},
       { 101,  120,  111, 1020,    0},
       {  22,  110,  101,  222,    0},
       { 100,  112,  110, 1012,    0},
       {  20,  100,   21,  201,    0},
       {  22,  111,  102, 1010,    0},
       {  12,  100,   21,  201,    0},
       { 100,  111,  101, 1001,    0},
       { 100,  111,  102, 1002,    0},
       {  21,  102,  100,  221,    0},
       { 100,  111,  110, 1011,    0},
       { 100,  111,  102, 1002,    0},
       { 100,  111,  102, 1010,    0},
       {  22,  110,  101, 1000,    0},
       { 100,  112,  102, 1011,    0},
       {  21,  102,  101,  222,    0},
       {  12,  100,   21,  201,    0},
       {  12,   22,   21,  200,    0},
       { 100,  111,  102, 1010,    0},
       {  22,  111,  101, 1001,    0},
       {  22,  110,  101, 1000,    0},
       { 100,  111,  102, 1010,    0},
       { 100,  111,  102, 1002,    0},
       { 100,  111,  101, 1002,    0},
       { 100,  111,  102, 1010,    0},
       {  22,  111,  101, 1001,    0},
       { 100,  111,  102, 1010,    0},
       {  22,  111,  101, 1001,    0},
       {  22,  110,  101, 1001,    0},
       { 100,  111,  102, 1002,    0},
       {  21,  101,  100,  212,    0},
       {  20,  100,   21,  201,    0},
       {  20,  101,   22,  211,    0},
       {  22,  112,  110, 1010,    0},
       { 101,  120,  112, 1101,    0},
       { 100,  111,  102, 1010,    0},
       {  21,  101,   22,  211,    0},
       { 100,  111,  101, 1001,    0},
       {  22,  110,  101,  222,    0},
       {  22,  110,  101, 1001,    0},
       { 100,  112,  110, 1020,    0},
       { 100,  111,  102, 1002,    0},
       { 100,  111,  102, 1010,    0},
       { 101,  120,  112, 1101,    0},
       { 110,  122,  120, 1121,  212},
       { 101,  112,  110, 1020,    0},
       {  21,  102,  100,  220,    0},
       {  20,  100,   21,  202,    0},
       {  22,  102,  100,  221,    0},
       { 101,  112,  102, 1012,    0},
       {  22,  110,  101,  222,    0},
       { 100,  111,  102, 1010,    0},
       { 110,  122,  120, 1120,  100},
       { 100,  112,  102, 1011,    0},
       { 101,  120,  111, 1022,    0}};

int prediction [TEST_SIZE];

void setup() {

  Serial.begin(9600);
  while (!Serial) {};

  // print the header
  Serial.println("Start evaluations");
  
}

void loop() {
  
  long start = millis();
    
  for(int i = 0; i < TEST_SIZE; i++){
    float X_temp [FEATURE_SIZE];
    for(int j = 0; j < FEATURE_SIZE; j++){
      X_temp[j] = X_test[i][j];
    }
    prediction[i] = model.predict(X_temp);
  }
  Serial.print("Time to predict the X_test: ");
  long totTime = millis() - start;
  Serial.println(totTime);
  delay(1000);
}
