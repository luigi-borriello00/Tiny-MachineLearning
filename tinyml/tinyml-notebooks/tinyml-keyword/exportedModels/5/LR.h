#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LogisticRegression {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float votes[5] = { -1.229087064663 ,-2.400015095991 ,-1.794855013492 ,-1.389994391301 ,-1.473380443252  };
                        votes[0] += dot(x,   -0.819006669484  , 0.438208498139  , 0.050100842125  , -0.217327733438  , -0.652964861064  , 0.049544154948  , -0.091913058607  , 0.360383733112  , 0.854806323432  , 0.047919149532  , 0.694319953549  , -0.717615636664  , -0.077652776249  , 0.133165371221  , -0.419075869787  , 0.452514445911  , -0.439147110318  , -0.604608433769  , -0.718751149474  , 0.875197462513  , -0.155311408897  , 0.177369720159  , -0.050847474632  , -0.445509912198  , 0.557586995642  , -0.38342522677  , -0.396647533348  , -0.168680165495  , 0.68926480276  , 0.076636432767  , -0.150607579988  , -0.009874652756 );
                        votes[1] += dot(x,   0.261304159633  , -0.845930494594  , -0.453795318326  , 1.064325158665  , 0.417980677941  , -0.492794717442  , 0.039582511701  , -0.861396182298  , -0.617057360941  , -0.244164734243  , 0.402727486228  , 0.374905238138  , -0.21360919188  , -0.047834386005  , 0.184252146485  , -0.160657016885  , 0.426959963114  , 0.872006585464  , -0.229146367728  , -0.004909600071  , 0.244539502323  , 0.268313311953  , -0.016259976604  , -1.053217887235  , 0.840639317938  , -0.335822871988  , 0.07505543424  , 0.939828093584  , -0.94608241439  , 0.234505944056  , -0.526897236041  , 0.129205921498 );
                        votes[2] += dot(x,   0.79647024814  , 0.371699473739  , -0.547867914451  , -0.160177743771  , -0.164074234337  , 0.338173084125  , 0.009669764944  , 0.415077488017  , 0.535709136994  , 0.192705007099  , -1.390567495835  , 0.505973146473  , 0.083068953108  , 0.174504546141  , -0.29726075999  , 0.276592795977  , -0.337272715339  , -0.009266164175  , -0.142933802636  , -0.693880738967  , 1.083075378155  , -0.562553642281  , -0.072758616929  , 0.286566150211  , -0.367828107797  , -0.065684354984  , 0.578518448268  , -0.555389999023  , 0.355418532814  , -0.136922214159  , 0.053621609306  , 0.005124670607 );
                        votes[3] += dot(x,   -0.264654490414  , 0.12565818256  , 0.737777998421  , -0.251697401969  , 0.15422422395  , 0.340171513394  , 0.464393912581  , -1.005934582959  , -1.415463772985  , -0.540956920513  , -0.336443414653  , 0.110251605386  , 1.113774443082  , -0.135047742797  , -0.023388965235  , -0.712653523912  , 0.090388834383  , -0.031960539067  , -0.093968213578  , -0.969103126253  , -0.424010626528  , 0.54772514843  , 0.027198132885  , 0.907066281874  , -0.667905462521  , 0.286390435768  , -0.176699050557  , -0.453963323109  , 0.378457429326  , 0.282713829955  , 0.012861123035  , 0.195418019059 );
                        votes[4] += dot(x,   0.414692180759  , -0.86368933914  , -0.184993719719  , 0.030332663276  , 0.643374314871  , -0.445581684867  , -0.345939245715  , 0.818723608723  , -0.023864611251  , 0.182083331237  , 0.058328710775  , 0.086183504937  , -0.954679930143  , 0.13924157121  , 0.15423575598  , 0.370144505845  , -0.055579680963  , -0.516645402072  , 0.401559701705  , 0.482936927967  , -0.654043585597  , -0.032414358375  , 0.255621165337  , -0.366466771841  , 0.012605922185  , 0.589004485283  , -0.828964510174  , 0.4496759186  , 0.01364726223  , -0.293677061158  , 0.136110689888  , -0.152799505669 );
                        // return argmax of votes
                        uint8_t classIdx = 0;
                        float maxVotes = votes[0];

                        for (uint8_t i = 1; i < 5; i++) {
                            if (votes[i] > maxVotes) {
                                classIdx = i;
                                maxVotes = votes[i];
                            }
                        }

                        return classIdx;
                    }

                protected:
                    /**
                    * Compute dot product
                    */
                    float dot(float *x, ...) {
                        va_list w;
                        va_start(w, 32);
                        float dot = 0.0;

                        for (uint16_t i = 0; i < 32; i++) {
                            const float wi = va_arg(w, double);
                            dot += x[i] * wi;
                        }

                        return dot;
                    }
                };
            }
        }
    }